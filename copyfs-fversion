#!/usr/bin/perl -w

use strict;
use warnings;

use IPC::Open3;
use IO::Select;

use POSIX qw(strftime);
use Fcntl ':mode';
use File::Basename;
use File::stat;

use Algorithm::Diff qw(diff);

use Errno;

use Getopt::Std;

my $MAJOR=0;
my $MINOR=0;

$SIG{__DIE__} = sub {
	# We're dying, make sure we're safe!
	if($MAJOR) {
		set_current_version($ARGV[0],$MAJOR,$MINOR);
	}
	die @_;
};

#
# Run a command, and returns both output and error.
#
sub run_command($)
{
    my $command = shift;
    my ($output, $error, $msg);
    my $selector;
    my $pid;

    $output = "";
    $error = "";
    $pid = open3(*INPUT, *OUTPUT, *ERROR, $command);

    # No input
    close(INPUT);

    $selector = IO::Select->new();
    $selector->add(*ERROR, *OUTPUT);

    # Get what gets passed on the descriptors
    while (my @ready = $selector->can_read)
    {
	foreach my $fh (@ready)
	{
	    if (fileno($fh) == fileno(ERROR))
	    {
		$msg = scalar(<ERROR>);
		$error .= $msg if defined($msg);
	    }
	    else
	    {
		$msg = scalar(<OUTPUT>);
		$output .= $msg if defined($msg);
	    }
	    $selector->remove($fh) if eof($fh);
	}
    }

    close(OUTPUT);
    close(ERROR);

    # Kill the zombie
    waitpid($pid, 0);

    return ($output, $error);
}

#
# Get an extended attribute.
#
sub get_ea($$)
{
    my ($file, $name) = @_;
    my ($output, $error);
    my $cmd;

    ($file, $name) = prepare_ea_name($file, $name);
    $cmd = "getfattr --absolute-names -h -n '$name' --only-values -- '$file'";
    ($output, $error) = run_command($cmd);
    $error =~ s/^getfattr: // if $error;
    return ($output, $error);
}

#
# Set an extended attribute.
#
sub set_ea($$$)
{
    my ($file, $name, $value) = @_;
    my ($output, $error);
    my $cmd;

    ($file, $name) = prepare_ea_name($file, $name);
    $cmd = "setfattr -h -n '$name' -v '$value' -- '$file'";
    ($output, $error) = run_command($cmd);
    $error =~ s/^setfattr: // if $error;
    return ($output, $error);
}

#
# append name of deleted files to ea property name
#
sub prepare_ea_name($$)
{
    my ($file, $name) = @_;
    my $append = "";
    
    while (! -e $file && $file ne ".")
    {
        $append = basename($file)."/".$append;
        $file = dirname($file);
    }
    
    if (length($append) != 0)
    {
        $name = $name . ":" . substr($append, 0, -1);
    }
    return ($file, $name);
}

#
# Get current version number.
#
sub get_current_version($)
{
    my $file = shift;
    my ($value, $error);

    ($value, $error) = get_ea($file, "rcs.locked_version");
    die "$0: $error" if $error;
    return split(/\./, $value);
}

#
# Set current version number.
#
sub set_current_version($$$)
{
    my ($file, $vid, $svid) = @_;
    
    if ($vid == 0) {
        # Version 0 is used internally to mark a file as deleted
        if (-d $file) {
            rmdir($file) or die "$0: $!";
        } else {
            unlink($file) or die "$0: $!";
        }
    } else {
        my (undef, $error) = set_ea($file, "rcs.locked_version", "$vid.$svid");
        die "$0: $error" if $error;
    }
}

#
# Purges a file completely ... Scary!!
#
sub purge_file($$) {
	my ($file, $pflag) = @_;
	
	my($value, $error) = set_ea($file, "rcs.purge", "$pflag");
	die "$0: $error" if $error;
}

#
# Dump a mode into an ls-like string.
#
sub get_perms($)
{
    my $mode = shift;
    my $result = "";

    # Type
    $result .= "s" if S_ISSOCK($mode);
    $result .= "l" if S_ISLNK($mode);
    $result .= "-" if S_ISREG($mode);
    $result .= "b" if S_ISBLK($mode);
    $result .= "d" if S_ISDIR($mode);
    $result .= "c" if S_ISCHR($mode);
    $result .= "p" if S_ISFIFO($mode);

    # Mode for owner
    $result .= (($mode & S_IRUSR) ? "r" : "-");
    $result .= (($mode & S_IWUSR) ? "w" : "-");
    $result .= (($mode & S_ISUID) ? (($mode & S_IXUSR) ? "s" : "S") :
		(($mode & S_IXUSR) ? "x" : "-"));

    # Mode for group
    $result .= (($mode & S_IRGRP) ? "r" : "-");
    $result .= (($mode & S_IWGRP) ? "w" : "-");
    $result .= (($mode & S_ISGID) ? (($mode & S_IXGRP) ? "s" : "S") :
		(($mode & S_IXGRP) ? "x" : "-"));

    # Mode for other
    $result .= (($mode & S_IROTH) ? "r" : "-");
    $result .= (($mode & S_IWOTH) ? "w" : "-");
    $result .= (($mode & S_ISVTX) ? (($mode & S_IXOTH) ? "t" : "T") :
		(($mode & S_IXOTH) ? "x" : "-"));

    return $result;
}

#
# Dump the owner in string form.
#
sub dump_owner($)
{
    my $uid = shift;
    my $value;

    $value = getpwuid($uid);
    return $value if $value;
    return "$uid";
}

#
# Dump the group in string form.
#
sub dump_group($)
{
    my $gid = shift;
    my $value;

    $value = getgrgid($gid);
    return $value if $value;
    return "$gid";
}

#
# Dump the version information for a file.
# NOTE: To increase utility, this functil now returns an array
# of lines it would have printed, instead of printf'ing them. -M@
#
sub dump_versions($)
{
    my $file = shift;

    # Get the active revision
    my ($cvid, $csvid) = get_current_version($file);

    # Get the attribute
    my ($value, $error) = get_ea($file, "rcs.metadata_dump");
    die "$0: $error" if $error;
    
    # Put what we want to print into an array:
    my @dumplines;

    if ($cvid == 0) {
        push(@dumplines, "File $file (file is deleted) :\n");
    } else {
        push(@dumplines, "File $file ('*' is active) :\n");
    }

    # Explode the attributes
    my @versions = reverse(split(/\|/, $value));
    foreach my $vstring (@versions)
    {
	my ($vid, $svid, $mode, $uid, $gid, $size,
	    $mtime) = split(/:/, $vstring);

	
	my $vline=sprintf("  v%-4.4s : %s  %-8.8s %-8.8s %10i %s", "$vid.$svid",
	       get_perms($mode), dump_owner($uid), dump_group($gid),
	       $size, strftime("%c", localtime($mtime)));

	$vline .= sprintf(" [*]") if (($cvid == $vid) && ($csvid == $svid));
	$vline .= "\n";
	push(@dumplines,$vline);
    }
    return @dumplines;
}

#
# Dump the file list of a directory.
#
sub dump_dir($)
{
    my $file = shift;

    # Get the attribute
    my ($value, $error) = get_ea($file, "rcs.list_dir");
    die "$0: $error" if $error;
    
    # Put what we want to print into a hash:
    my %dumplines;

    # Explode the attributes
    my @files = split(/\0/, $value);
    foreach my $fstring (@files)
    {
        my ($vid, $svid, $mode, $uid, $gid, $size,
            $mtime, $name) = split(/:/, $fstring, 8);
    
        my $fline;
        if ($vid == 0)
        {
            $fline=sprintf("  deleted                                                                       %s",
                $name);
        }
        else
        {
            $fline=sprintf("  v%-4.4s : %s  %-8.8s %-8.8s %10i %s %s", "$vid.$svid",
               get_perms($mode), dump_owner($uid), dump_group($gid),
               $size, strftime("%c", localtime($mtime)), $name);
        }
        $fline .= "\n";
        $dumplines{$name}=$fline;
    }
    # return values ordered by file name
    return map {$dumplines{$_}} sort keys %dumplines;
}

#
# Generate the tag data for a directory
#
sub generate_tag_file_for_directory
{
    my ($fh, $directory) = @_;
    my @dirs = ();

    # Find files and directories
    opendir(DIR, $directory) or die "$0: Can't open directory !\n";
    while (my $item = readdir(DIR))
    {
	if (($item ne ".") && ($item ne ".."))
	{
	    my ($vid, $svid) = get_current_version("$directory/$item");
	    my $st = lstat("$directory/$item");

	    push @dirs, $item if (S_ISDIR($st->mode));
	    print $fh "$directory/$item|$vid.$svid\n";
	}
    }
    closedir(DIR);

    # Iterate over directories
    for my $item (@dirs)
    {
	generate_tag_file_for_directory($fh, "$directory/$item");
    }
}

#
# Generate the tag data
#
sub generate_tag_file($$)
{
    my ($root, $tagname) = @_;
    my $fh;

    open $fh, ">$tagname" or die "$0: Can't open tagfile !\n";
    generate_tag_file_for_directory($fh, $root);
    close $fh;
}

#
# Restore a tag file
#
sub restore_tag_file($$)
{
    my ($root, $tagname) = @_;

    # Create the root dir if it does no exist
    if (!lstat($root))
    {
	print "Creating root directory $root\n";
	mkdir($root);
    }

    open TAG, $tagname or die "$0: Can't open tagfile !\n";
    while (my $line = <TAG>)
    {
	if ($line =~ m/^([^\|]+)\|(\d+).(\d+)/)
	{
	    my ($file, $vid, $svid) = ($1, $2, $3);

	    if ($file !~ m/^\Q$root\E\//)
	    {
		print STDERR "$0: you are trying to put a tag in a different ";
		print STDERR "directory !\n";
		exit(1);
	    }

	    my $st = lstat($file);

	    if (!$st)
	    {
		my $done = 0;

		# It can take some time to change files back into directories
		# since fuse caches the lookup info for about one second, so
		# we retry here.
		do
		{
		    # Touch the file first, since it does not exist
		    if (!open(FILE, ">$file"))
		    {
			# "Not a directory" ignored
			print STDERR "$0: could not touch $file !\n"
			    if (!$!{ENOTDIR});
		    }
		    else
		    {
			$done = 1;
			close(FILE);
		    }
		}
		while (!$done && $!{ENOTDIR});
	    }

	    # Fix version
	    set_current_version($file, $vid, $svid);

	    printf("Restored $file to version $vid.$svid\n");
	}
    }

    close TAG;
}

#
# Diff a pair of text files - mgk
#
sub get_diff($$$$$) {
		my($file,$v1,$v2,$v3,$v4)=@_;
		
		# Preserve the current version
		($MAJOR,$MINOR)=get_current_version($file);
		
		# Set the version to the first version
		set_current_version($file,$v1,$v2);
		
		# Test for textyness
		unless(-T $file) {
			print STDERR "Version $v1.$v2 is not a text file. I will only diff text files.\n";
			set_current_version($file,$MAJOR,$MINOR);
			return(1);
		}
		
		# Get the file
		if(!open(TFA,"<$file")) {
			# Balk, reset version, and bail
			print STDERR "Problem reading $file v$v1.$v2 : $!\n";
			set_current_version($file,$MAJOR,$MINOR);
			return(1);
		} 
		my @lines1=<TFA>;
		close TFA;

		# Set the version to the second version
		set_current_version($file,$v3,$v4);
		
		# Test for textyness
		unless(-T $file) {
			print STDERR "Version $v3.$v4 is not a text file. I will only diff text files.\n";
			set_current_version($file,$MAJOR,$MINOR);
			return(1);
		}
		
		# Get the file
		if(!open(TFB,"<$file")) {
			# Balk, reset version, and bail
			print STDERR "Problem reading $file v$v3.$v4 : $!\n";
			set_current_version($file,$MAJOR,$MINOR);
			return(1);
		} 
		my @lines2=<TFB>;
		close TFB;

		#chomp @lines1;
		#chomp @lines2;
		
		# Reset the current version now
		set_current_version($file, $MAJOR, $MINOR);
		$MAJOR=0;
		$MINOR=0;

		# Diff it
		my $diffs=diff(\@lines1,\@lines2);			
		return(0) unless @$diffs; # No diff

		foreach my $chunk (@$diffs) {
			foreach my $line (@$chunk) {
				my($sign,$lineno,$text)=@$line;
				print $lineno+1 . " $sign $text";
				unless($text =~ /\n$/) { print "\n"; }
			}
			print "--------\n";
		}

    	return(0);
}

#
# Search the versions for $pattern
#
sub grep_versions($$) {
	my($file,$pattern)=@_;
	
	# This statement doesn't really matter, because CopyFS is unithreaded, YAY!!!
	# But we'll say it anyhow because, well, people suck and probably will break it anyhow.
	print "Do not mess with this file... search in progress...\n";
	
	# Preserve the current version
	($MAJOR,$MINOR)=get_current_version($file);
	
	my @dump=dump_versions($file);
	shift @dump; # Get rid of the header
	my $hits=0; # track the number of hits
	my $obstatus=$|; # preserve the autoflush buffering status.
	$|=1; # enable autoflush
	for(@dump) {
		chomp;
		s/^\s+//; # get rid of leading ws that will mess up the split
		my @pieces=split(/\s+/);
		my $vers=$pieces[0];
		$vers =~ s/^v//;
		my($maj,$min)=split(/\./,$vers);
		set_current_version($file,$maj,$min);
		
		# Test for textyness
		unless(-T $file) {
			print STDERR "Version $maj.$min is not a text file. Skipping...\n";
			next;
		}
		
		if (!open(DF,"<$file")) {
			print STDERR "Problem reading $maj.$min. Skipping...\n";
			next;
		}
		
		while(<DF>) {
			if(/$pattern/) {
				chomp;
				print "v$maj.$min: $_\n";
				$hits++;
			}	
		}
		close(DF);
	}	
	print "$hits results.\n";
	$|=$obstatus; # restore autoflush
	set_current_version($file,$MAJOR,$MINOR); # restore current version
	$MAJOR=0;
	$MINOR=0;
	
	return 0;
}

# Strip the path
$0 = basename($0);

my %options = ();

# Parse command line
getopts("p:G:ghl:rsct:d:u:", \%options);

if ($options{h})
{
    printf("Usage: $0 [-h] [-r] [-s] [-l version] [-g] [-c] [-d v1,v2] [-G string] [-p n|A] file\n");
    printf("\n");
    printf("  -h           Show this help\n");

    # Version management
    printf("  -r           Release the version lock\n");
    printf("  -s           Show the versions for this file (default)\n");
    printf("  -g           Get the version number in use\n");
    printf("  -l version   Lock this version\n");
    printf("  -c           Show directory content\n");
    # Added by M@
    printf("  -d v1,v2     Show the diff of two versions\n");
    printf("  -G string    Search all versions of a file for a string\n");
    printf("  -p n|A       Purge the oldest n versions of the file or A for All\n");

    # Tagging
    printf("  -t tagfile   Create a tag file\n");
    printf("  -u tagfile   Restore a tag file\n");
    exit(0);
}

# We need a file there
if (scalar(@ARGV) != 1)
{
    print STDERR "$0: You need to specify one file to operate on.\n";
    exit(1);
}

# Show by default
$options{s} = 1
    if (!$options{r} && !$options{g} && !$options{s} && !$options{l} && !$options{c} &&
	!$options{t} && !$options{u} && !$options{d} && !$options{p} && !$options{G});

if ($options{r})
{
    set_current_version($ARGV[0], -1, -1);
    exit(0);
}

if ($options{g})
{
    my ($vid, $svid) = get_current_version($ARGV[0]);
    print "$vid.$svid\n";
    exit(0);
}

if ($options{s})
{
    print dump_versions($ARGV[0]);
    exit(0);
}

if ($options{c})
{
    print dump_dir($ARGV[0]);
    exit(0);
}

if ($options{l})
{
    if ($options{l} =~ m/^(\d+).(\d+)$/)
    {
	set_current_version($ARGV[0], $1, $2);
	exit(0);
    }
    else
    {
	print STDERR "$0: This version number is incorrect (format is x.y)\n";
	exit(1);
    }
}

if ($options{d})
{
	# Text diffs
	if($options{d} =~ m/^(\d+).(\d+),(\d+).(\d+)$/)
	{
		exit get_diff($ARGV[0],$1,$2,$3,$4);
	}
	else
	{
		print STDERR "$0: The format is incorrect (format is x1.y1,x2.y2)\n";
        exit(1);
    }
}

if ($options{p})
{
	# Purges
	unless(-f $ARGV[0]) {
		print STDERR "$0: purging only supported for files at this time.\n";
		exit(1);
	} elsif($options{p} =~ m/^(\d+)$/) {
		# Number specified
		purge_file($ARGV[0],$1);
	} elsif($options{p} eq "A") {
		# All of them!
		purge_file($ARGV[0],"A");
	} else {
		# Bad syntax!!
		print STDERR "$0: RTFM: specify either a digit or 'A'\n";
        exit(1);
	}
	exit(0);		
}

if ($options{G})
{
	# Interversion grep
	exit grep_versions($ARGV[0],$options{G});
	
}

if ($options{t})
{
    generate_tag_file($ARGV[0], $options{t});
    exit(0);
}

if ($options{u})
{
    restore_tag_file($ARGV[0], $options{u});
    exit(0);
}
